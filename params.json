{"name":"Twitch-bot","tagline":"Twitch Chat bot written in Python","body":"Roboraj\r\n==========\r\n\r\nThis is a simple Twitch chat/irc bot written in python.\r\n\r\n\r\nInstallation\r\n============\r\n* Open up your terminal/shell of choice.\r\n* Install the [http://docs.python-requests.org/en/latest/](Requests library) if you haven't already using `pip install requests`. I tested this application on Python 2.7.5.\r\n* \r\n* Clone the Git repository.\r\n* Move config/config_example.py to config/config.py. Replace all of the placeholders there with your own username/oauth token/channels to join etc (tips are given in the file).\r\n* Type `chmod +x /serve.py`. To run, you simply need to execute the file by typing `./serve.py`.\r\n\r\n\r\nAdding your own commands\r\n========================\r\n\r\nYou're going to need to know basic Python if you want to add your own commands. Open up `lib/functions_commands.py`. There are examples of pre-made functions in there as examples. The limit parameter is the amount of times a command can be used in seconds, if you don't want a limit to be enforced put in 0.\r\n\r\nIf your command is only going to return a string, ex - `!hello` returns `Welcome!`, don't include the `argc` parameter. Place the string you wish to be returned to the user in the `return` parameter. For example, if you wanted to create a command such as this and limit it to being used ever 30 seconds, you would add in:\r\n\r\n```python\r\n'!hello': {\r\n\t\t'limit': 10,\r\n\t\t'return': 'Welcome!'\r\n}\r\n```\r\n\r\nHowever, if your command has to have some logic implemented - if the command is just going to return whatever a function returns, set the `return` parameter on the command to `command`, and set `argc` to `0`. If your command is going to take arguments, ex `!hello <name>`, set argc to `1` or however many arguments the command is going to take in.\r\n\r\nBelow the `valid_commands` dictionary, add a function that's name follows the syntax of `command_<command name>`. If your `argc` was set to `0`, don't include `args` in the functions parameters, else set the only parameter to `args`. Args will contain a list of whatever arguments were passed to the command.\r\n\r\nThis command will contain whatever logic needs to be carried out. You should validate the arguments in there. After you have the response that you want a user to see, just `return` it.\r\n\r\nLet's say we want to add a command which will take two arguments, we will call it `!random` and it will take a `minimum` and `maximum` argument. We will limit this command to be allowed to be called every 20 seconds.\r\n\r\nImport the `random` library, and add the following to the `valid_commands` dictionary:\r\n\r\n```python\r\n'!random': {\r\n\t\t'limit': 20,\r\n\t\t'argc': 2,\r\n\t\t'return': 'command'\r\n}\r\n```\r\n\r\nAnd then below that, add the following: \r\n\r\n```python\r\ndef command_random(args):\r\n  min = args[0]\r\n  max = args[1]\r\n    \r\n  usage = '!random <min> <max>'\r\n  \r\n  # carry out validation\r\n  try:\r\n    return ranrange(min, max)\r\n  except ValueError:\r\n    return '!random <min> <max> (use full integers)'\r\n  except:\r\n    return usage\r\n```\r\n\r\nAnd now if somebody types `!random 5 10` into the chat, the bot will respond with a pseudo-random number between 5 and 10.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}